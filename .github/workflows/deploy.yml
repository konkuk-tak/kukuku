name: deploy

on:
  push:
    branches: [ release ]

jobs:
  deploy:
    runs-on: self-hosted
    env:
      PROJECT: 'kukuku'
      XC_PROJECT: "kukuku/kukuku.xcodeproj"
      XC_SCHEME: "kukuku"
      XC_ARCHIVE: "kukuku/kukuku.xcarchive"

      # certificate 
      ENCRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/kukuku_certification.p12.gpg' }}
      DECRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/kukuku_certification.p12' }}
      CERT_ENCRYPTION_KEY: ${{ secrets.CERT_ENCRYPTION_PWD }} # gpg로 파일 암호화할 때 사용한 암호
      
      # provisioning
      ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/kukuku_GithubActions.mobileprovision.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/kukuku_GithubActions.mobileprovision' }}
      PROVISIONING_ENCRYPTION_KEY: ${{ secrets.PROVISIONING_ENCRYPTION_KEY }} # gpg로 파일 암호화할 때 사용한 암호
      
      # certification export key
      CERT_EXPORT_KEY: ${{ secrets.CERT_EXPORT_PWD }}
      
      KEYCHAIN: ${{ 'test.keychain' }}
   
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Create secret file
        env:
          DeveloperCode_SECRET: ${{ secrets.DEVELOPER_CODE_SECRET }}
        run: |
          echo $DeveloperCode_SECRET > ${{ env.PROJECT }}/${{ env.PROJECT }}/Resources/DeveloperCode.xcconfig
          ls -al ${{ env.PROJECT }}/${{ env.PROJECT }}/Resources/
        
      # 키체인 초기화 - 임시 키체인 생성
      - name: Configure Keychain 
        run: |
          security delete-keychain "$KEYCHAIN" || true
          security create-keychain -p "" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings
        
      - name : Configure Code Signing
        run: |
          # certificate & provisioning복호화
          gpg -d -o "$DECRYPTED_CERT_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERT_ENCRYPTION_KEY" "$ENCRYPTED_CERT_FILE_PATH"
          gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_PROVISION_FILE_PATH"
          
          # security를 사용하여 인증서와 개인 키를 새로 만든 키 체인으로 가져옴
          security import "$DECRYPTED_CERT_FILE_PATH" -k "$KEYCHAIN" -P "$CERT_EXPORT_KEY" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          
          # Xcode에서 찾을 수 있는 프로비저닝 프로필 설치하기 위해 우선 프로비저닝 디렉토리를 생성
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          # 디버깅 용 echo 명령어
          echo `ls .github/secrets/*.mobileprovision`
            # 모든 프로비저닝 프로파일을 rename 하고 위에서 만든 디렉토리로 복사하는 과정
            for PROVISION in `ls .github/secrets/*.mobileprovision`
            do
              UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done        

      # 아카이브
      - name: Archive app
        run: >
          xcodebuild clean build
          -project $XC_PROJECT
          -scheme $XC_SCHEME
          -configuration Release 
          -archivePath $XC_ARCHIVE
          
      # ipa 파일 생성    
      - name: Export app
        run: >
          xcodebuild -exportArchive
          -archivePath $XC_ARCHIVE
          -exportOptionsPlist ExportOptions.plist
          -exportPath . -allowProvisioningUpdates
  
      - name: Upload app to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: 'kukuku.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
  
